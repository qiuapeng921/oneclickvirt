name: Build and Push Docker Images
on:
  workflow_run:
    workflows: ["Build and Release oneclickvirt"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_IMAGE: spiritlhl/oneclickvirt
  GHCR_IMAGE: ghcr.io/${{ github.repository }}

jobs:
  check-workflow-success:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Check trigger type and status
        run: |
          echo "Event name: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Manually triggered workflow"
          else
            echo "Triggered by workflow_run event"
            echo "Previous workflow: ${{ github.event.workflow_run.name }}"
            echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
          fi

  build:
    runs-on: ${{ matrix.runner }}
    needs: check-workflow-success
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
            platform: linux/amd64
            variant: full
            dockerfile: Dockerfile
          - arch: arm64
            runner: ubuntu-24.04-arm
            platform: linux/arm64
            variant: full
            dockerfile: Dockerfile
          - arch: amd64
            runner: ubuntu-latest
            platform: linux/amd64
            variant: no-db
            dockerfile: Dockerfile.no-db
          - arch: arm64
            runner: ubuntu-24.04-arm
            platform: linux/arm64
            variant: no-db
            dockerfile: Dockerfile.no-db
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
      
      - name: Login to Docker Hub
        id: login-dockerhub
        continue-on-error: true
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker Hub
        if: steps.login-dockerhub.outcome == 'success'
        id: meta-dockerhub
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=${{ matrix.variant == 'no-db' && 'no-db' || 'latest' }}
          flavor: |
            suffix=-${{ matrix.arch }}
      
      - name: Extract metadata for GHCR
        id: meta-ghcr
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GHCR_IMAGE }}
          tags: |
            type=raw,value=${{ matrix.variant == 'no-db' && 'no-db' || 'latest' }}
          flavor: |
            suffix=-${{ matrix.arch }}
      
      - name: Build and push to Docker Hub
        if: steps.login-dockerhub.outcome == 'success'
        id: build-dockerhub
        continue-on-error: true
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=${{ env.DOCKER_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          cache-from: |
            type=gha,scope=dockerhub-${{ matrix.variant }}-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=dockerhub-${{ matrix.variant }}-${{ matrix.arch }}
      
      - name: Build and push to GHCR
        id: build-ghcr
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=${{ env.GHCR_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          cache-from: |
            type=gha,scope=ghcr-${{ matrix.variant }}-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=ghcr-${{ matrix.variant }}-${{ matrix.arch }}
      
      - name: Export Docker Hub digest
        if: steps.build-dockerhub.outcome == 'success'
        run: |
          mkdir -p /tmp/digests-dockerhub
          digest="${{ steps.build-dockerhub.outputs.digest }}"
          touch "/tmp/digests-dockerhub/${digest#sha256:}"
      
      - name: Export GHCR digest
        if: steps.build-ghcr.outcome == 'success'
        run: |
          mkdir -p /tmp/digests-ghcr
          digest="${{ steps.build-ghcr.outputs.digest }}"
          touch "/tmp/digests-ghcr/${digest#sha256:}"
      
      - name: Upload Docker Hub digest
        if: steps.build-dockerhub.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: digests-dockerhub-${{ matrix.variant }}-${{ matrix.arch }}
          path: /tmp/digests-dockerhub/*
          if-no-files-found: error
          retention-days: 1
      
      - name: Upload GHCR digest
        if: steps.build-ghcr.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: digests-ghcr-${{ matrix.variant }}-${{ matrix.arch }}
          path: /tmp/digests-ghcr/*
          if-no-files-found: error
          retention-days: 1

  merge-full-dockerhub:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        id: login-dockerhub
        continue-on-error: true
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
      
      - name: Download Docker Hub digests
        id: download-dockerhub
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          pattern: digests-dockerhub-full-*
          merge-multiple: true
          path: /tmp/digests-dockerhub
      
      - name: Extract metadata for Docker Hub
        if: steps.login-dockerhub.outcome == 'success' && steps.download-dockerhub.outcome == 'success'
        id: meta-dockerhub
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=latest
            type=raw,value=v${{ steps.date.outputs.date }}
            type=raw,value={{date 'YYYYMMDD'}}
      
      - name: Create manifest list and push to Docker Hub
        if: steps.login-dockerhub.outcome == 'success' && steps.download-dockerhub.outcome == 'success'
        continue-on-error: true
        working-directory: /tmp/digests-dockerhub
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKER_IMAGE }}@sha256:%s ' *)
      
      - name: Inspect Docker Hub image
        if: steps.login-dockerhub.outcome == 'success' && steps.download-dockerhub.outcome == 'success'
        continue-on-error: true
        run: |
          docker buildx imagetools inspect ${{ env.DOCKER_IMAGE }}:latest
      
      - name: Update Docker Hub Description
        if: steps.login-dockerhub.outcome == 'success'
        continue-on-error: true
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: spiritlhl/oneclickvirt
          readme-filepath: ./README.md

  merge-full-ghcr:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
      
      - name: Download GHCR digests
        uses: actions/download-artifact@v4
        with:
          pattern: digests-ghcr-full-*
          merge-multiple: true
          path: /tmp/digests-ghcr
      
      - name: Extract metadata for GHCR
        id: meta-ghcr
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GHCR_IMAGE }}
          tags: |
            type=raw,value=latest
            type=raw,value=v${{ steps.date.outputs.date }}
            type=raw,value={{date 'YYYYMMDD'}}
      
      - name: Create manifest list and push to GHCR
        working-directory: /tmp/digests-ghcr
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
      
      - name: Inspect GHCR image
        run: |
          docker buildx imagetools inspect ${{ env.GHCR_IMAGE }}:latest

  merge-no-db-dockerhub:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        id: login-dockerhub
        continue-on-error: true
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
      
      - name: Download Docker Hub digests
        id: download-dockerhub
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          pattern: digests-dockerhub-no-db-*
          merge-multiple: true
          path: /tmp/digests-dockerhub
      
      - name: Extract metadata for Docker Hub
        if: steps.login-dockerhub.outcome == 'success' && steps.download-dockerhub.outcome == 'success'
        id: meta-dockerhub
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=no-db
            type=raw,value=no-db-v${{ steps.date.outputs.date }}
            type=raw,value=no-db-{{date 'YYYYMMDD'}}
      
      - name: Create manifest list and push to Docker Hub
        if: steps.login-dockerhub.outcome == 'success' && steps.download-dockerhub.outcome == 'success'
        continue-on-error: true
        working-directory: /tmp/digests-dockerhub
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKER_IMAGE }}@sha256:%s ' *)
      
      - name: Inspect Docker Hub image
        if: steps.login-dockerhub.outcome == 'success' && steps.download-dockerhub.outcome == 'success'
        continue-on-error: true
        run: |
          docker buildx imagetools inspect ${{ env.DOCKER_IMAGE }}:no-db

  merge-no-db-ghcr:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
      
      - name: Download GHCR digests
        uses: actions/download-artifact@v4
        with:
          pattern: digests-ghcr-no-db-*
          merge-multiple: true
          path: /tmp/digests-ghcr
      
      - name: Extract metadata for GHCR
        id: meta-ghcr
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GHCR_IMAGE }}
          tags: |
            type=raw,value=no-db
            type=raw,value=no-db-v${{ steps.date.outputs.date }}
            type=raw,value=no-db-{{date 'YYYYMMDD'}}
      
      - name: Create manifest list and push to GHCR
        working-directory: /tmp/digests-ghcr
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
      
      - name: Inspect GHCR image
        run: |
          docker buildx imagetools inspect ${{ env.GHCR_IMAGE }}:no-db

  update-docs:
    runs-on: ubuntu-latest
    needs: [merge-full-dockerhub, merge-full-ghcr, merge-no-db-dockerhub, merge-no-db-ghcr]
    if: always()
    
    steps:
      - name: Checkout oneclickvirt repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
      
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
      
      - name: Update local README.md
        run: |
          DATE_TAG="${{ steps.date.outputs.date }}"
          
          # Update Chinese README
          sed -i "s/| \`spiritlhl\/oneclickvirt:[0-9]\{8\}\` | 一体化版本特定日期版本 |/| \`spiritlhl\/oneclickvirt:${DATE_TAG}\` | 一体化版本特定日期版本 |/g" README.md
          sed -i "s/| \`spiritlhl\/oneclickvirt:no-db-[0-9]\{8\}\` | 独立数据库版本特定日期 |/| \`spiritlhl\/oneclickvirt:no-db-${DATE_TAG}\` | 独立数据库版本特定日期 |/g" README.md
          
          echo "Updated README.md with tag: ${DATE_TAG}"
      
      - name: Update local README_EN.md
        run: |
          DATE_TAG="${{ steps.date.outputs.date }}"
          
          # Update English README
          sed -i "s/| \`spiritlhl\/oneclickvirt:[0-9]\{8\}\` | All-in-one version with specific date |/| \`spiritlhl\/oneclickvirt:${DATE_TAG}\` | All-in-one version with specific date |/g" README_EN.md
          sed -i "s/| \`spiritlhl\/oneclickvirt:no-db-[0-9]\{8\}\` | Standalone database version with date |/| \`spiritlhl\/oneclickvirt:no-db-${DATE_TAG}\` | Standalone database version with date |/g" README_EN.md
          
          echo "Updated README_EN.md with tag: ${DATE_TAG}"
      
      - name: Commit and push local changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet; then
            echo "No changes to commit in local repo"
          else
            git add README.md README_EN.md
            git commit -m "chore: update Docker image tags to ${{ steps.date.outputs.date }}"
            git push
            echo "Successfully pushed local documentation updates"
          fi
      
      - name: Checkout documentation repo
        uses: actions/checkout@v4
        with:
          repository: oneclickvirt/oneclickvirt.github.io
          token: ${{ secrets.PAT_TOKEN }}
          path: docs-repo
      
      - name: Update Chinese documentation
        run: |
          DATE_TAG="${{ steps.date.outputs.date }}"
          DOC_FILE="docs-repo/docs/guide/oneclickvirt/oneclickvirt_install.md"
          
          # Update the image tag table
          sed -i "s/| \`spiritlhl\/oneclickvirt:[0-9]\{8\}\` | 一体化版本特定日期版本 |/| \`spiritlhl\/oneclickvirt:${DATE_TAG}\` | 一体化版本特定日期版本 |/g" "$DOC_FILE"
          sed -i "s/| \`spiritlhl\/oneclickvirt:no-db-[0-9]\{8\}\` | 独立数据库版本特定日期 |/| \`spiritlhl\/oneclickvirt:no-db-${DATE_TAG}\` | 独立数据库版本特定日期 |/g" "$DOC_FILE"
          
          echo "Updated Chinese documentation with tag: ${DATE_TAG}"
      
      - name: Update English documentation
        run: |
          DATE_TAG="${{ steps.date.outputs.date }}"
          DOC_FILE="docs-repo/docs/en/guide/oneclickvirt/oneclickvirt_install.md"
          
          # Update the image tag table
          sed -i "s/| \`spiritlhl\/oneclickvirt:[0-9]\{8\}\` | All-in-one version with specific date |/| \`spiritlhl\/oneclickvirt:${DATE_TAG}\` | All-in-one version with specific date |/g" "$DOC_FILE"
          sed -i "s/| \`spiritlhl\/oneclickvirt:no-db-[0-9]\{8\}\` | Standalone database version with date |/| \`spiritlhl\/oneclickvirt:no-db-${DATE_TAG}\` | Standalone database version with date |/g" "$DOC_FILE"
          
          echo "Updated English documentation with tag: ${DATE_TAG}"
      
      - name: Commit and push external doc changes
        run: |
          cd docs-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --quiet; then
            echo "No changes to commit in external docs"
          else
            git add .
            git commit -m "chore: update Docker image tags to ${{ steps.date.outputs.date }}"
            git push
            echo "Successfully pushed external documentation updates"
          fi