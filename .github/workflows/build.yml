name: Build and Release oneclickvirt

on:
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24.5
        cache: true
        cache-dependency-path: server/go.sum

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json

    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

    - name: Create build directory
      run: |
        mkdir -p build
        ls -la

    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: web/node_modules
        key: ${{ runner.os }}-npm-${{ hashFiles('web/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Build Vue web application
      run: |
        cd web
        if [ ! -d "node_modules" ]; then
          npm install --no-optional
          npm install @rollup/rollup-linux-x64-gnu --save-dev
        fi
        npm run build
        cd dist
        zip -r ../../build/web-dist.zip .

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build Go server binaries (Standalone - without embedded frontend)
      working-directory: ./server
      run: |
        ls
        export GO111MODULE=on
        go mod download
        go mod verify
        export CGO_ENABLED=0
        export LDFLAGS="-s -w -extldflags '-static'"
        
        # Linux AMD64
        GOOS=linux GOARCH=amd64 go build -ldflags="$LDFLAGS" -o ../build/server-linux-amd64 .
        
        # Linux ARM64
        GOOS=linux GOARCH=arm64 go build -ldflags="$LDFLAGS" -o ../build/server-linux-arm64 .
        
        # Windows AMD64
        GOOS=windows GOARCH=amd64 go build -ldflags="$LDFLAGS" -o ../build/server-windows-amd64.exe .
        
        # Windows ARM64
        GOOS=windows GOARCH=arm64 go build -ldflags="$LDFLAGS" -o ../build/server-windows-arm64.exe .

    - name: Prepare embedded frontend
      run: |
        # Copy built web files to server/router/dist for embedding
        mkdir -p server/router/dist
        cp -r web/dist/* server/router/dist/
        ls -la server/router/dist/

    - name: Build Go server binaries (All-in-one - with embedded frontend)
      working-directory: ./server
      run: |
        export GO111MODULE=on
        export CGO_ENABLED=0
        export LDFLAGS="-s -w -extldflags '-static'"
        
        # Linux AMD64 (with embedded frontend)
        GOOS=linux GOARCH=amd64 go build -tags embed -ldflags="$LDFLAGS" -o ../build/server-allinone-linux-amd64 .
        
        # Linux ARM64 (with embedded frontend)
        GOOS=linux GOARCH=arm64 go build -tags embed -ldflags="$LDFLAGS" -o ../build/server-allinone-linux-arm64 .
        
        # Windows AMD64 (with embedded frontend)
        GOOS=windows GOARCH=amd64 go build -tags embed -ldflags="$LDFLAGS" -o ../build/server-allinone-windows-amd64.exe .
        
        # Windows ARM64 (with embedded frontend)
        GOOS=windows GOARCH=arm64 go build -tags embed -ldflags="$LDFLAGS" -o ../build/server-allinone-windows-arm64.exe .

    - name: Compress binaries
      run: |
        cd build
        # Compress standalone binaries
        tar -czf server-linux-amd64.tar.gz server-linux-amd64
        tar -czf server-linux-arm64.tar.gz server-linux-arm64
        zip server-windows-amd64.zip server-windows-amd64.exe
        zip server-windows-arm64.zip server-windows-arm64.exe
        
        # Compress all-in-one binaries
        tar -czf server-allinone-linux-amd64.tar.gz server-allinone-linux-amd64
        tar -czf server-allinone-linux-arm64.tar.gz server-allinone-linux-arm64
        zip server-allinone-windows-amd64.zip server-allinone-windows-amd64.exe
        zip server-allinone-windows-arm64.zip server-allinone-windows-arm64.exe
        
        # Remove uncompressed binaries
        rm server-linux-amd64 server-linux-arm64 server-windows-amd64.exe server-windows-arm64.exe
        rm server-allinone-linux-amd64 server-allinone-linux-arm64 server-allinone-windows-amd64.exe server-allinone-windows-arm64.exe
        
        ls -lh

    - name: Update install script with new tag
      run: |
        TAG_NAME="v${{ steps.date.outputs.date }}"
        sed -i "s/VERSION=.*/VERSION=\"${TAG_NAME}\"/" install.sh
        
    - name: Commit updated install script
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add install.sh
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "chore: update install script to version v${{ steps.date.outputs.date }}"
          git push
        fi

    - name: Get previous release tag
      id: get_previous_tag
      run: |
        # 获取最新的 release tag (不包括当前即将创建的)
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
        echo "Previous release tag: $PREVIOUS_TAG"
    
    - name: Create Release with Auto-generated Notes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="v${{ steps.date.outputs.date }}"
        PREVIOUS_TAG="${{ steps.get_previous_tag.outputs.previous_tag }}"
        
        # Build release body header
        RELEASE_HEADER="## 自动构建发布 - ${{ steps.date.outputs.date }}
        
        ### 独立部署版本（需要分别部署前后端）
        - \`server-linux-amd64.tar.gz\` - 后端 Linux AMD64 版本
        - \`server-linux-arm64.tar.gz\` - 后端 Linux ARM64 版本  
        - \`server-windows-amd64.zip\` - 后端 Windows AMD64 版本
        - \`server-windows-arm64.zip\` - 后端 Windows ARM64 版本
        - \`web-dist.zip\` - 前端静态文件
        
        ### 一体化部署版本（前端已内嵌，单二进制文件部署）
        - \`server-allinone-linux-amd64.tar.gz\` - 一体化 Linux AMD64 版本
        - \`server-allinone-linux-arm64.tar.gz\` - 一体化 Linux ARM64 版本
        - \`server-allinone-windows-amd64.zip\` - 一体化 Windows AMD64 版本
        - \`server-allinone-windows-arm64.zip\` - 一体化 Windows ARM64 版本"
        
        # Create release with auto-generated notes
        if [ -n "$PREVIOUS_TAG" ]; then
          # Use --generate-notes with previous tag for accurate changelog
          gh release create "$TAG_NAME" \
            --title "Release $TAG_NAME" \
            --notes "$RELEASE_HEADER" \
            --notes-start-tag "$PREVIOUS_TAG" \
            --generate-notes \
            ./build/server-linux-amd64.tar.gz \
            ./build/server-linux-arm64.tar.gz \
            ./build/server-windows-amd64.zip \
            ./build/server-windows-arm64.zip \
            ./build/server-allinone-linux-amd64.tar.gz \
            ./build/server-allinone-linux-arm64.tar.gz \
            ./build/server-allinone-windows-amd64.zip \
            ./build/server-allinone-windows-arm64.zip \
            ./build/web-dist.zip
        else
          # First release, no previous tag
          gh release create "$TAG_NAME" \
            --title "Release $TAG_NAME" \
            --notes "$RELEASE_HEADER" \
            --generate-notes \
            ./build/server-linux-amd64.tar.gz \
            ./build/server-linux-arm64.tar.gz \
            ./build/server-windows-amd64.zip \
            ./build/server-windows-arm64.zip \
            ./build/server-allinone-linux-amd64.tar.gz \
            ./build/server-allinone-linux-arm64.tar.gz \
            ./build/server-allinone-windows-amd64.zip \
            ./build/server-allinone-windows-arm64.zip \
            ./build/web-dist.zip
        fi
